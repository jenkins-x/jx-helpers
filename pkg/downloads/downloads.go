package downloads

import (
	"archive/tar"
	"compress/gzip"
	"fmt"
	"io"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"time"

	"github.com/jenkins-x/go-scm/scm"
	"github.com/jenkins-x/jx-helpers/v3/pkg/httphelpers"
	"github.com/jenkins-x/jx-helpers/v3/pkg/termcolor"
	"github.com/jenkins-x/jx-logging/v3/pkg/log"
)

var githubClient *scm.Client

// Download a file from the given URL
func DownloadFile(url string, filepath string, verbose bool) error {
	if verbose {
		log.Logger().Infof("Downloading %s to %s...", termcolor.ColorInfo(url), termcolor.ColorInfo(filepath))
	}

	// Create the file
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close() //nolint:errcheck

	// Get the data
	resp, err := httphelpers.GetClientWithTimeout(time.Hour * 2).Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close() //nolint:errcheck

	if resp.StatusCode != http.StatusOK {
		err := fmt.Errorf("download of %s failed with return code %d", url, resp.StatusCode)
		return err
	}

	// Writer the body to file
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	// make it executable
	err = os.Chmod(filepath, 0755)
	if err != nil {
		return err
	}

	if verbose {
		log.Logger().Infof("Downloaded %s", termcolor.ColorInfo(filepath))
	}

	return nil
}

// untargz a tarball to a target, from
// http://blog.ralch.com/tutorial/golang-working-with-tar-and-gzipf
func UnTargz(tarball, target string, onlyFiles []string) error {
	zreader, err := os.Open(tarball)
	if err != nil {
		return err
	}
	defer zreader.Close() //nolint:errcheck

	reader, err := gzip.NewReader(zreader)
	defer reader.Close() //nolint:errcheck
	if err != nil {
		return err
	}

	tarReader := tar.NewReader(reader)

	for {
		inkey := false
		header, err := tarReader.Next()
		if err == io.EOF {
			break
		} else if err != nil {
			return err
		}

		for _, value := range onlyFiles {
			if value == "*" || value == path.Base(header.Name) {
				inkey = true
				break
			}
		}

		if !inkey && len(onlyFiles) > 0 {
			continue
		}

		path := filepath.Join(target, path.Base(header.Name))
		err = UnTarFile(header, path, tarReader)
		if err != nil {
			return err
		}
	}
	return nil
}

// untargz a tarball to a target including any folders inside the tarball
// http://blog.ralch.com/tutorial/golang-working-with-tar-and-gzipf
func UnTargzAll(tarball, target string) error {
	zreader, err := os.Open(tarball)
	if err != nil {
		return err
	}
	defer zreader.Close()

	reader, err := gzip.NewReader(zreader)
	defer reader.Close()
	if err != nil {
		panic(err)
	}

	tarReader := tar.NewReader(reader)

	for {
		header, err := tarReader.Next()
		if err == io.EOF {
			break
		} else if err != nil {
			return err
		}

		path := filepath.Join(target, header.Name)
		err = UnTarFile(header, path, tarReader)
		if err != nil {
			return err
		}
	}
	return nil
}

// UnTarFile extracts one file from the tar, or creates a directory
func UnTarFile(header *tar.Header, target string, tarReader io.Reader) error {
	info := header.FileInfo()
	if info.IsDir() {
		if err := os.MkdirAll(target, info.Mode()); err != nil {
			return err
		}
		return nil
	}
	// In a normal archive, directories are mentionned before their files
	// But in an archive generated by helm, no directories are mentionned
	if err := os.MkdirAll(path.Dir(target), 0755); err != nil {
		return err
	}

	file, err := os.OpenFile(target, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, info.Mode())
	if err != nil {
		return err
	}
	defer file.Close()
	_, err = io.Copy(file, tarReader)
	return err
}
